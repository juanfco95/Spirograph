(defun guarda-informacio()
    (putprop 'spiro '(
        (150 105) 
        (144 96)) 
        'grans)
    (putprop 'spiro '(
        (84 35 56)
        (80 33 53)
        (75 31 50)
        (72 29 48)
        (63 25 42)
        (60 23 40)
        (56 21 37)
        (52 19 35)
        (48 17 32)
        (45 16 30)
        (42 14 28)
        (40 13 27)
        (32 9 21)
        (30 8 20)
        (24 5 16)) 
        'petits)
    (putprop 'spiro 105 'rgran) ;DEFAULT (putprop 'spiro 150 'rgran)
    (putprop 'spiro 72 'rpetit) ;DEFAULT (putprop 'spiro 50 'rpetit)
    (putprop 'spiro 3 'punt)    
    (putprop 'spiro 0 'inici)
    (putprop 'spiro 1.5 'escala);DEFAULT (putprop 'spiro 1.8 'escala)
    (putprop 'spiro t 'interior)
    (putprop 'spiro 0 'x)
    (putprop 'spiro 0 'y)
    (putprop 'spiro 0 'xini)
    (putprop 'spiro 0 'yini)
    (putprop 'spiro 0.2 'pas)   ;DEFAULT (putprop 'spiro 0.2 'pas)
)

(defun vermell()
    (color 255 0 0)
)

(defun verd()
    (color 0 255 0)
)

(defun blau()
    (color 0 0 255)
)

(defun negre()
    (color 0 0 0)
)

(defun cercle (x y radi n)
    (mou (+ x radi) y)
    (cercle2 x y radi (/ 360 n) 0)
)

(defun cercle2 (x y radi pas angle)
    (cond ((< angle 360)
        (pinta (+ x (* radi (cos (radians (+ angle pas)))))
    (+ y (* radi (sin (radians (+ angle pas))))))
        (cercle2 x y radi pas (+ angle pas)))
        (t t)
    )
)

(defun radians (graus)
    (/ (* graus (* 2 pi)) 360)
)

(defun mou (x y)
    (move (realpart (round (+ 320 (get 'spiro 'xini) (* (get 'spiro 'escala) x))))
        (realpart (round (+ 187 (get 'spiro 'yini) (* (get 'spiro 'escala) y)))))
)

(defun pinta (x y)
    (draw (realpart (round (+ 320 (get 'spiro 'xini) (* (get 'spiro 'escala) x))))
        (realpart (round (+ 187 (get 'spiro 'yini) (* (get 'spiro 'escala) y)))))
)

(defun punt(p)
    (putprop 'spiro p 'punt)
)

(defun inici(angle)
    (putprop 'spiro angle 'inici)
)

(defun escala(e)
    (putprop 'spiro e 'escala)
)

(defun interior(b)
    (putprop 'spiro b 'interior)
)

(defun posicio(x y)
    (putprop 'spiro x 'xini)
    (putprop 'spiro y 'yini)
)

(defun reduir(m n)
    (list (/ m (gcd m n)) (/ n (gcd m n)))  
)


(defun radigran (r)
    (putprop 'spiro r 'rgran)
    (cercle (get 'spiro 'x) (get 'spiro 'y) (get 'spiro 'rgran) (/ 360 (get 'spiro 'pas)))
)

(defun radipetit (r)
    (putprop 'spiro r 'rpetit)
    (cercle 
    (* (- (get 'spiro 'rgran) r) (sin (radians (get 'spiro 'inici))))
    (* (- (get 'spiro 'rgran) r) (cos (radians (get 'spiro 'inici))))
    (get 'spiro 'rpetit) 
    (/ 360 (get 'spiro 'pas)))
)

(defun spirograph (p gran petit t1 inc inici)
    (cond 
        ((eq (get 'spiro 'interior) t) (spirographH p gran petit t1 inc inici))
        ((eq (get 'spiro 'interior) nil) (spirographE p gran petit t1 inc inici))
    )
)

(defun spirographH (p gran petit t1 inc inici) 
    (setq x (calculaPuntXH gran petit t1 (radians 0)))
    (setq y (calculaPuntYH gran petit t1 (radians 0)))
    (setq x1 (calculaIniciX x y (radians inici)))
    (setq y1 (calculaIniciY x y (radians inici)))
    (mou x1 y1) 
    (spirograph2H (/ p inc) gran petit t1 inc (radians inc) inici)
)

(defun spirograph2H (p gran petit t1 inc angle inici)  
    (setq x (calculaPuntXH gran petit t1 angle))
    (setq y (calculaPuntYH gran petit t1 angle))
    (setq x1 (calculaIniciX x y (radians inici)))
    (setq y1 (calculaIniciY x y (radians inici)))
    (pinta x1 y1)
    (cond ((<= p 0) t)  
        (t (spirograph2H (- p 1) gran petit t1 inc (+ angle inc) inici)) 
    )
)

(defun spirographE (p gran petit t1 inc inici) 
    (setq x (calculaPuntXE gran petit t1 (radians 0)))
    (setq y (calculaPuntYE gran petit t1 (radians 0)))
    (setq x1 (calculaIniciX x y (radians inici)))
    (setq y1 (calculaIniciY x y (radians inici)))
    (mou x1 y1) 
    (spirograph2E (/ p inc) gran petit t1 inc (radians inc) inici)
)

(defun spirograph2E (p gran petit t1 inc angle inici)  
    (setq x (calculaPuntXE gran petit t1 angle))
    (setq y (calculaPuntYE gran petit t1 angle))
    (setq x1 (calculaIniciX x y (radians inici)))
    (setq y1 (calculaIniciY x y (radians inici)))
    (pinta x1 y1)
    (cond ((<= p 0) t)  
        (t (spirograph2E (- p 1) gran petit t1 inc (+ angle inc) inici)) 
    )
)

(defun calculaIniciX (x y inici)
    (+ (* x (cos inici))
    (* y (sin inici)))
)

(defun calculaIniciY (x y inici)
    (+ (* -1 (* x (sin inici)))
    (* y (cos  inici)))
)

(defun calculaPuntXH (gran petit t1 ang)
    (+ (* (- gran petit) (cos (/ (* petit ang) gran)))
    (* t1 (cos (* (- 1 (/ petit gran)) ang))))
)

(defun calculaPuntYH (gran petit t1 ang)
    (- (* (- gran petit) (sin (/ (* petit ang) gran)))
    (* t1 (sin (* (- 1 (/ petit gran)) ang))))
)

(defun calculaPuntXE (gran petit t1 ang)
    (- (* (+ gran petit) (cos (/ (* petit ang) gran)))
    (* t1 (cos (* (+ 1 (/ petit gran)) ang))))
)

(defun calculaPuntYE (gran petit t1 ang)
    (- (* (+ gran petit) (sin (/ (* petit ang) gran)))
    (* t1 (sin (* (+ 1 (/ petit gran)) ang))))
)

(defun spiro (gran petit p inc inici)
    (setq forats (getForats petit (get 'spiro 'petits)))
    (cond ((eq (granApte gran (get 'spiro 'grans)) nil) (print "El parametro gran de la funcion no es apto"))
          ((eq forats nil) (print "El parametro petit de la funcion no es apto"))
          (t (spirograph (/ (calculaRadiansVoltes gran petit) inc) gran petit (calculaT petit forats p) inc inici))
    )
)

(defun calculaVoltes (num den)
    (/ den (gcd num den))
)

(defun calculaRadiansVoltes (gran petit)
    (* (calculaVoltes gran petit) (* pi  2))
)

(defun calculaT (petit forats p)
    (* (- forats p) 
    (/ petit (+ 1 forats))
    )
)

(defun getForats (cercle llista)
    (cond ((eq (car llista)  nil) nil)
          ((eq cercle (car (car llista))) (car (cdr (car llista))))
          (t (getForats cercle (cdr llista)))
    )
)

(defun granApte (cercle llista)
    (cond ((eq (car llista)  nil) nil)
          ((eq cercle (car (car llista))) t)
          ((equal (list cercle) (cdr (car llista))) t)
          (t (granApte cercle (cdr llista)))
    )
)

(defun roda ()
    (spiro (get 'spiro 'rgran) (get 'spiro 'rpetit) (get 'spiro 'punt) (get 'spiro 'pas) (get 'spiro 'inici))
)

(defun roda-voltes (n)
    (spirograph (/ (* n (* pi 2)) (get 'spiro 'pas)) (get 'spiro 'rgran) (get 'spiro 'rpetit) 
    (calculaT (get 'spiro 'rpetit) (getForats (get 'spiro 'rpetit) (get 'spiro 'petits)) (get 'spiro 'punt)) 
    (get 'spiro 'pas) (get 'spiro 'inici))
)

(defun spiro-voltes (voltes gran petit p in inici)
    (spirograph (/ (* voltes (* pi 2)) (get 'spiro 'pas)) gran petit (calculaT petit (getForats petit (get 'spiro 'petits)) p) in inici)
)

(defun spiros (l)
    (cond   ((null l) nil)
            (t (spiro (car (car l)) (car (cdr (car l)))
            (car (cdr (cdr (car l))))
            (car (cdr (cdr (cdr (car l)))))
            (car (cdr (cdr (cdr (cdr (car l))))))
            ) (spiros (cdr l)))
    )
)

(defun figura1 ()
    (radigran 105)
    (radipetit 63)
    (inici 45)
    (cls)
    (vermell)
    (punt 1)(roda)
    (punt 3)(roda)
    (punt 5)(roda)
    (verd)
    (punt 7)(roda)
    (punt 9)(roda)
    (punt 11)(roda)
    (blau)
    (punt 13)(roda)
    (punt 15)(roda)
    (punt 17)(roda)
)

(defun figura2 ()
 (cls)
 (vermell)
 (spiros '((105 63 1 0.5 0)
 (105 63 3 0.5 0)
 (105 63 5 0.5 0)))
 (verd)
 (spiros '((105 63 7 0.5 0)
 (105 63 9 0.5 0)
 (105 63 11 0.5 0)))
 (blau) 
 (spiros '((105 63 13 0.5 0)
 (105 63 15 0.5 0)
 (105 63 17 0.5 0)))
)


(defun hipo ()
 (escala 1.2)
 (radigran 105)
 (radipetit 40)
 (inici 0)
 (interior t)
 (cls)
 (vermell)
 (punt 7)(roda)
)

(defun epi ()
 (escala 0.8)
 (radigran 150)
 (radipetit 40)
 (inici 0)
 (interior nil)
 (cls)
 (vermell)
 (punt 5)(roda)
)


(defun prueba1 ()
 (cls)
 (escala 0.5)
 (print (get 'spiro 'xini))
 (print (get 'spiro 'yini))
 (blau)
 (spiros '((144 63 35 0.4 0)
 (144 63 35 0.4 0)
 (144 63 35 0.4 0)))
 (verd)
 (spiros '((144 48 35 0.2 0)
 (144 48 35 0.2 0)
 (144 48 35 0.2 0)))
 (vermell) 
 (spiros '((105 48 25 0.5 0)
 (105 48 25 0.5 0)
 (105 48 25 0.5 0)))
)

(defun prueba2 ()
 (escala 0.5)
 (blau)
 (spiros '((144 42 19 0.2 0)
 (105 42 19 0.2 0)
 (144 42 19 0.2 0)))
 (vermell)
 (spiros '((96 60 32 0.2 0)
 (144 60 32 0.2 0)
 (96 60 32 0.2 0)))
 (negre) 
 (spiros '((105 48 25 0.5 0)
 (105 48 25 0.5 0)
 (105 48 25 0.5 0)))
)

(defun prueba3 ()
 (escala 0.5)
 (negre)
 (spiro-voltes 10 150 72 15 0.2 0)
 (blau) 
 (spiros '((105 48 25 0.5 0)
 (105 48 25 0.5 0)
 (105 48 25 0.5 0)))
 (vermell) 
 (spiro-voltes 10 96 63 15 0.2 0)
 (verd)
 (spiro-voltes 7 150 48 10 0.2 0)
)

(defun prueba4 ()
 (escala 0.45)
 (negre)
 (spiro-voltes 10 150 72 15 0.2 0)
 (blau) 
 (spiros '((105 48 25 0.5 0)
 (105 48 25 0.5 0)
 (105 48 25 0.5 0)))
 (vermell) 
 (spiro-voltes 10 150 32 12 0.2 0)
 (verd)
 (spiros '((105 63 7 0.5 0)
 (105 63 9 0.5 0)
 (105 63 11 0.5 0)))
)

(defun prueba5 ()
 (escala 0.5)
 (negre)
 (spiro-voltes 15 150 72 15 0.2 0)
 (verd) 
 (spiro-voltes 8 150 63 15 0.2 0)
 (vermell)
 (spiro-voltes 15 105 40 15 0.2 0)
 (negre)
 (spiro-voltes 10 150 72 15 0.2 0)
)

(defun prueba6 ()
 (escala 0.27)
 (putprop 'spiro 144 'rgran)
 (putprop 'spiro 40 'rpetit)
 (inici 0)
 (interior nil)
 
 (vermell)
 (punt 5)(roda)
 (vermell)
 (spiro-voltes 15 105 40 15 0.2 0)
 (verd)
 (spiros '((96 24 11 0.2 0)
 (96 24 11 0.2 0)
 (96 24 11 0.2 0)))
 (negre)
 (spiro-voltes 10 96 72 15 0.2 0)
)

(defun prueba7 ()
 (escala 0.22)
 (putprop 'spiro 150 'rgran)
 (putprop 'spiro 48 'rpetit)
 (inici 0)
 (interior nil)
 (vermell)
 (punt 10)(roda)
 (negre)
 (spiro-voltes 15 150 72 15 0.2 0)
 (verd)
 (spiros '((150 48 35 0.5 0)
 (150 48 35 0.5 0)
 (150 48 35 0.5 0)))
 (escala 0.1)
 (blau)
 (spiros '((96 24 35 0.2 0)
 (96 24 35 0.2 0)
 (96 24 8 0.2 0)))
 (escala 0.05)
 (verd)
 (spiro-voltes 10 96 72 15 0.2 0)
 (escala 0.09)
 (negre)
 (spiro-voltes 10 96 72 15 0.2 0)
 (escala 0.08)
 (vermell)
 (spiro-voltes 10 96 72 15 0.2 0)
)

(defun prueba8 ()
    (escala 0.27)
    (putprop 'spiro 144 'rgran)
    (putprop 'spiro 40 'rpetit)
    (inici 45)
    (vermell)
    (punt 1)(roda)
    (punt 2)(roda)
    (punt 3)(roda)
    (verd)
    (punt 4)(roda)
    (punt 5)(roda)
    (punt 6)(roda)
    (negre)
    (spiro-voltes 3 96 72 15 0.2 0)(roda)
    (spiros '((96 24 11 0.2 0)
    (96 24 11 0.2 0)
    (96 24 11 0.2 0)))
)

(defun prueba9 ()
 (escala 0.4)
 (putprop 'spiro 150 'rgran)
 (putprop 'spiro 84 'rpetit)
 (inici 0)
 (interior t)
 (vermell)
 (punt 7)(roda)
 (punt 9)(roda)
 (punt 11)(roda)
 (negre)
 (punt 13)(roda)
 (punt 14)(roda)
 (punt 15)(roda)
)

(defun prueba10 ()
 (escala 0.45)
 (putprop 'spiro 144 'rgran)
 (putprop 'spiro 84 'rpetit)
 (inici 0)
 (interior t)
 
 (negre)
 (punt 3)(roda)
 (punt 6)(roda)
 (punt 9)(roda)
 (escala 0.25)
 (vermell)
 (spiro-voltes 5 150 72 15 0.2 0)(roda)
 (escala 0.4)
 (verd)
 (punt 7)(roda)
)

(defun prueba11 ()
    (escala 0.39)
    (putprop 'spiro 150 'rgran)
    (putprop 'spiro 30 'rpetit)
    (inici 0)
    (vermell)
    (punt 12)(roda)
    (vermell)
    (punt 3)(roda)
    (negre)
    (spiro-voltes 3 144 30 10 0.2 0)(roda)
    (verd)
    (punt 4)(roda)
    (spiro 144 60 8 0.2 0)
    (punt 6)(roda)
    (negre)
    (spiro-voltes 3 96 72 15 0.2 0)(roda)
)

(defun prueba12 ()
 (escala 0.45)
 (verd)
 (spiro 144 40 1 0.2 0)
 (escala 0.35)
 (negre)
 (spiro 144 40 2 0.2 0)
 (escala 0.25)
 (vermell)
 (spiro 144 40 3 0.2 0)
 (escala 0.15)
 (blau)
 (spiro 144 40 4 0.2 0)
 (escala 0.095)
 (verd)
 (spiro 144 40 5 0.2 0)
 (escala 0.085)
 (negre)
 (spiro 144 40 6 0.2 0)
 (escala 0.075)
 (vermell)
 (spiro 144 40 7 0.2 0)
 (escala 0.065)
 (blau)
 (spiro 144 40 8 0.2 0)
)

( defun dibuix ()
    (posicio (* -1 240) 115)
    (prueba1)
    (posicio (* -1 120) 115)
    (prueba2)
    (posicio 5 115)
    (prueba3)
    (posicio 125 115)
    (prueba4)
    (posicio 245 115)
    (prueba5)

    (posicio (* -1 240) (* -1 5))
    (prueba6)
    (posicio (* -1 120) (* -1 5))
    (prueba7)
    (posicio 5 (* -1 5))
    (prueba8)
    (posicio 125 (* -1 5))
    (prueba9)
    (posicio 250 (* -1 5))
    (prueba10)
    (posicio (* -1 240) (* -1 125))
    (prueba11)
    (posicio (* -1 100) (* -1 125))
    (prueba12)
   
)

(guarda-informacio)